# VoiceHelper 配置映射
# 应用全局配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: voicehelper-config
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: voicehelper
    app.kubernetes.io/component: config
data:
  # 环境配置
  ENV: "production"
  NODE_ENV: "production"
  FLASK_ENV: "production"
  
  # 服务发现配置
  POSTGRES_HOST: "postgres-master.voicehelper-storage.svc.cluster.local"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "voicehelper"
  
  REDIS_HOST: "redis-cluster.voicehelper-storage.svc.cluster.local"
  REDIS_PORT: "6379"
  
  MINIO_ENDPOINT: "minio.voicehelper-storage.svc.cluster.local:9000"
  MINIO_SECURE: "false"
  
  NEO4J_URI: "bolt://neo4j.voicehelper-storage.svc.cluster.local:7687"
  
  # AI服务配置
  BGE_SERVICE_URL: "http://bge-service.voicehelper.svc.cluster.local:8080"
  FAISS_SERVICE_URL: "http://faiss-service.voicehelper.svc.cluster.local:8081"
  
  # 消息队列配置
  NATS_URL: "nats://nats.voicehelper-storage.svc.cluster.local:4222"
  KAFKA_BROKERS: "kafka-0.kafka.voicehelper-storage.svc.cluster.local:9092,kafka-1.kafka.voicehelper-storage.svc.cluster.local:9092,kafka-2.kafka.voicehelper-storage.svc.cluster.local:9092"
  RABBITMQ_URL: "amqp://rabbitmq.voicehelper-storage.svc.cluster.local:5672"
  
  # 监控配置
  PROMETHEUS_URL: "http://prometheus.voicehelper-monitoring.svc.cluster.local:9090"
  JAEGER_ENDPOINT: "http://jaeger-collector.voicehelper-monitoring.svc.cluster.local:14268/api/traces"
  
  # 应用配置
  LOG_LEVEL: "info"
  CORS_ORIGINS: "https://voicehelper.local,https://api.voicehelper.local"
  
  # 功能开关
  ENABLE_VOICE_PROCESSING: "true"
  ENABLE_MULTIMODAL: "true"
  ENABLE_GRAPH_RAG: "true"
  ENABLE_AGENT_REASONING: "true"
  ENABLE_MONITORING: "true"
  ENABLE_TRACING: "true"
  
  # BGE配置
  BGE_MODEL_NAME: "BAAI/bge-large-zh-v1.5"
  BGE_DEVICE: "cpu"
  BGE_NORMALIZE: "true"
  BGE_BATCH_SIZE: "32"
  BGE_MAX_LENGTH: "512"
  
  # FAISS配置
  FAISS_INDEX_TYPE: "IVF"
  FAISS_NLIST: "100"
  FAISS_NPROBE: "10"
  VECTOR_DIMENSION: "1024"
  INDEX_SAVE_INTERVAL: "300"
  
  # JWT配置
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRE_HOURS: "24"
  
  # 资源限制
  MAX_CONCURRENT_REQUESTS: "100"
  MAX_UPLOAD_SIZE: "100MB"
  REQUEST_TIMEOUT: "30s"
  
---
# Nginx 配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: voicehelper
    app.kubernetes.io/component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # 日志格式
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        # 性能优化
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;
        
        # Gzip压缩
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # 上游服务器
        upstream gateway {
            server gateway.voicehelper.svc.cluster.local:8080;
            keepalive 32;
        }
        
        upstream voice-service {
            server voice-service.voicehelper.svc.cluster.local:8001;
            keepalive 32;
        }
        
        # 主服务器配置
        server {
            listen 80;
            server_name voicehelper.local;
            
            # 健康检查
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # API代理
            location /api/ {
                proxy_pass http://gateway/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
            
            # WebSocket代理
            location /ws/ {
                proxy_pass http://voice-service/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 7d;
                proxy_send_timeout 7d;
                proxy_read_timeout 7d;
            }
            
            # 静态文件
            location / {
                proxy_pass http://frontend.voicehelper.svc.cluster.local:3000;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }
    
---
# PostgreSQL 配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: config
data:
  postgresql.conf: |
    # 连接和认证
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # 内存配置
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 64MB
    
    # WAL配置
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_segments = 32
    
    # 检查点配置
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 5min
    
    # 日志配置
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # 性能优化
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             0.0.0.0/0               md5
    host    replication     replicator      0.0.0.0/0               md5
    
---
# Redis 配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: config
data:
  redis.conf: |
    # 网络配置
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    
    # 内存配置
    maxmemory 2gb
    maxmemory-policy allkeys-lru
    
    # 持久化配置
    save 900 1
    save 300 10
    save 60 10000
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # AOF配置
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # 集群配置
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 15000
    cluster-announce-ip ${POD_IP}
    cluster-announce-port 6379
    cluster-announce-bus-port 16379
    
    # 日志配置
    loglevel notice
    logfile /var/log/redis/redis.log
    
    # 安全配置
    protected-mode no
    
---
# Fluentd 配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: voicehelper-monitoring
  labels:
    app.kubernetes.io/name: fluentd
    app.kubernetes.io/component: config
data:
  fluent.conf: |
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      tag kubernetes.*
      read_from_head true
      <parse>
        @type json
        time_format %Y-%m-%dT%H:%M:%S.%NZ
      </parse>
    </source>
    
    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>
    
    <match kubernetes.**>
      @type elasticsearch
      host elasticsearch.voicehelper-monitoring.svc.cluster.local
      port 9200
      index_name voicehelper-logs
      type_name _doc
      <buffer>
        @type file
        path /var/log/fluentd-buffers/kubernetes.system.buffer
        flush_mode interval
        retry_type exponential_backoff
        flush_thread_count 2
        flush_interval 5s
        retry_forever
        retry_max_interval 30
        chunk_limit_size 2M
        queue_limit_length 8
        overflow_action block
      </buffer>
    </match>
