# PostgreSQL 高可用集群部署
# PostgreSQL 主节点
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-master
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: master
    app.kubernetes.io/part-of: voicehelper
spec:
  serviceName: postgres-master
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: master
        app.kubernetes.io/part-of: voicehelper
    spec:
      serviceAccountName: voicehelper-app
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "voicehelper"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_REPLICATION_USER
          value: "replicator"
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: master
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: voicehelper-ssd
      resources:
        requests:
          storage: 100Gi
---
# PostgreSQL 从节点
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica
    app.kubernetes.io/part-of: voicehelper
spec:
  serviceName: postgres-replica
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: replica
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: replica
        app.kubernetes.io/part-of: voicehelper
    spec:
      serviceAccountName: voicehelper-app
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      initContainers:
      - name: init-replica
        image: postgres:15-alpine
        command:
        - /bin/bash
        - -c
        - |
          if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
            pg_basebackup -h postgres-master.voicehelper-storage.svc.cluster.local -D /var/lib/postgresql/data -U replicator -v -P -W
            echo "standby_mode = 'on'" >> /var/lib/postgresql/data/recovery.conf
            echo "primary_conninfo = 'host=postgres-master.voicehelper-storage.svc.cluster.local port=5432 user=replicator'" >> /var/lib/postgresql/data/recovery.conf
          fi
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: replication-password
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: replica
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: voicehelper-ssd
      resources:
        requests:
          storage: 100Gi
---
# PostgreSQL 主节点服务
apiVersion: v1
kind: Service
metadata:
  name: postgres-master
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: master
    app.kubernetes.io/part-of: voicehelper
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: master
---
# PostgreSQL 从节点服务
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica
    app.kubernetes.io/part-of: voicehelper
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica
---
# PostgreSQL 读写分离服务
apiVersion: v1
kind: Service
metadata:
  name: postgres-read
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: read
    app.kubernetes.io/part-of: voicehelper
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: replica
---
# PostgreSQL 初始化脚本
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: config
data:
  01-init-database.sql: |
    -- 创建应用数据库
    CREATE DATABASE voicehelper;
    
    -- 创建复制用户
    CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'Replicator2025!';
    
    -- 切换到应用数据库
    \c voicehelper;
    
    -- 创建扩展
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- 创建基础表结构
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        username VARCHAR(255) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS conversations (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        title VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS messages (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        conversation_id UUID REFERENCES conversations(id) ON DELETE CASCADE,
        role VARCHAR(50) NOT NULL,
        content TEXT NOT NULL,
        metadata JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS voice_sessions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        session_data JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        expires_at TIMESTAMP WITH TIME ZONE
    );
    
    -- 创建索引
    CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
    CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
    CREATE INDEX IF NOT EXISTS idx_conversations_user_id ON conversations(user_id);
    CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);
    CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at);
    CREATE INDEX IF NOT EXISTS idx_voice_sessions_user_id ON voice_sessions(user_id);
    CREATE INDEX IF NOT EXISTS idx_voice_sessions_expires_at ON voice_sessions(expires_at);
    
  02-create-monitoring-user.sql: |
    -- 创建监控用户
    CREATE USER monitoring WITH PASSWORD 'Monitoring2025!';
    GRANT CONNECT ON DATABASE voicehelper TO monitoring;
    GRANT USAGE ON SCHEMA public TO monitoring;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO monitoring;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO monitoring;
---
# PostgreSQL 监控服务
apiVersion: v1
kind: Service
metadata:
  name: postgres-metrics
  namespace: voicehelper-storage
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: voicehelper
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: postgres-exporter
