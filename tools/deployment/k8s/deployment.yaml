apiVersion: v1
kind: Namespace
metadata:
  name: chatbot-prod

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: chatbot-config
  namespace: chatbot-prod
data:
  GIN_MODE: "release"
  ENV: "production"
  MILVUS_PORT: "19530"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "chatbot_prod"
  ALGO_SERVICE_URL: "http://algo-service:8000"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: chatbot-secrets
  namespace: chatbot-prod
type: Opaque
stringData:
  JWT_SECRET: "your-jwt-secret-here"
  ARK_API_KEY: "your-ark-api-key-here"
  WECHAT_APP_ID: "your-wechat-app-id"
  WECHAT_APP_SECRET: "your-wechat-app-secret"
  POSTGRES_USER: "chatbot"
  POSTGRES_PASSWORD: "secure-password"
  REDIS_PASSWORD: "redis-password"

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: chatbot-prod
  labels:
    app: backend
    version: v1.1.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        version: v1.1.0
    spec:
      containers:
      - name: backend
        image: chatbot-backend:v1.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        envFrom:
        - configMapRef:
            name: chatbot-config
        - secretRef:
            name: chatbot-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: logs
          mountPath: /var/log/chatbot
      volumes:
      - name: logs
        emptyDir: {}

---
# Algorithm Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: algo-deployment
  namespace: chatbot-prod
  labels:
    app: algo-service
    version: v1.1.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: algo-service
  template:
    metadata:
      labels:
        app: algo-service
        version: v1.1.0
    spec:
      containers:
      - name: algo-service
        image: chatbot-algo:v1.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: chatbot-config
        - secretRef:
            name: chatbot-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 5
        volumeMounts:
        - name: model-cache
          mountPath: /root/.cache
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: chatbot-prod
  labels:
    app: frontend
    version: v1.1.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        version: v1.1.0
    spec:
      containers:
      - name: frontend
        image: chatbot-frontend:v1.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.chatbot.example.com"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: chatbot-prod
spec:
  selector:
    app: backend
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: algo-service
  namespace: chatbot-prod
spec:
  selector:
    app: algo-service
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: chatbot-prod
spec:
  selector:
    app: frontend
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  type: ClusterIP

---
# HPA for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: chatbot-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70

---
# HPA for Algorithm Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: algo-hpa
  namespace: chatbot-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: algo-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# PodDisruptionBudget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: chatbot-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: backend

---
# PodDisruptionBudget for Algorithm Service
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: algo-pdb
  namespace: chatbot-prod
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: algo-service

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chatbot-ingress
  namespace: chatbot-prod
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - chatbot.example.com
    - api.chatbot.example.com
    secretName: chatbot-tls
  rules:
  - host: chatbot.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
  - host: api.chatbot.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080

---
# PersistentVolumeClaim for model cache
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-cache-pvc
  namespace: chatbot-prod
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: chatbot-network-policy
  namespace: chatbot-prod
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: chatbot-prod
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: chatbot-prod
    - podSelector: {}
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 53  # DNS
    - protocol: UDP
      port: 53  # DNS
    - protocol: TCP
      port: 443 # HTTPS
    - protocol: TCP
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
