# VoiceHelper 应用服务部署配置

# Go 后端网关服务
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: gateway
    app.kubernetes.io/component: backend
    app.kubernetes.io/version: "2.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gateway
        app.kubernetes.io/component: backend
        app.kubernetes.io/version: "2.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: voicehelper-sa
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL..."
          until nc -z postgresql-service 5432; do sleep 2; done
          echo "Waiting for Redis..."
          until nc -z redis-service 6379; do sleep 2; done
          echo "Waiting for BGE service..."
          until nc -z bge-service 8080; do sleep 2; done
          echo "Waiting for FAISS service..."
          until nc -z faiss-service 8081; do sleep 2; done
          echo "All dependencies are ready"
      containers:
      - name: gateway
        image: voicehelper/gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: grpc
          protocol: TCP
        envFrom:
        - configMapRef:
            name: voicehelper-config
        - secretRef:
            name: voicehelper-secrets
        env:
        - name: SERVICE_NAME
          value: "gateway"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: logs
          mountPath: /var/log/voicehelper
        - name: config
          mountPath: /etc/voicehelper
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
      volumes:
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: gateway-config

---
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: gateway
    app.kubernetes.io/component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: gateway
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: grpc
    port: 8081
    targetPort: 8081
    protocol: TCP
  type: ClusterIP

---
# Gateway 配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-config
  namespace: voicehelper
data:
  config.yaml: |
    server:
      host: "0.0.0.0"
      port: 8080
      grpc_port: 8081
      read_timeout: 30s
      write_timeout: 30s
      idle_timeout: 60s
      max_header_bytes: 1048576
    
    database:
      host: postgresql-service
      port: 5432
      name: voicehelper
      ssl_mode: disable
      max_open_conns: 100
      max_idle_conns: 10
      conn_max_lifetime: 3600s
    
    redis:
      host: redis-service
      port: 6379
      db: 0
      max_retries: 3
      pool_size: 100
      min_idle_conns: 10
    
    vector_services:
      bge_service_url: http://bge-service:8080
      faiss_service_url: http://faiss-service:8081
    
    nats:
      url: nats://nats-service:4222
      cluster_id: voicehelper-cluster
    
    services:
      algo_service_url: http://algo-service:8000
      voice_service_url: http://voice-service:8001
    
    security:
      cors_allowed_origins: ["*"]
      rate_limit_enabled: true
      rate_limit_requests: 100
      rate_limit_window: 60s
    
    monitoring:
      metrics_enabled: true
      tracing_enabled: true
      jaeger_endpoint: http://jaeger-collector.voicehelper-monitoring:14268/api/traces

---
# Python 算法服务
apiVersion: apps/v1
kind: Deployment
metadata:
  name: algo-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: algo-service
    app.kubernetes.io/component: algorithm
    app.kubernetes.io/version: "2.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: algo-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: algo-service
        app.kubernetes.io/component: algorithm
        app.kubernetes.io/version: "2.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: voicehelper-sa
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for BGE service..."
          until nc -z bge-service 8080; do sleep 2; done
          echo "Waiting for FAISS service..."
          until nc -z faiss-service 8081; do sleep 2; done
          echo "Waiting for Redis..."
          until nc -z redis-service 6379; do sleep 2; done
          echo "Dependencies are ready"
      containers:
      - name: algo-service
        image: voicehelper/algo-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: voicehelper-config
        - secretRef:
            name: voicehelper-secrets
        env:
        - name: SERVICE_NAME
          value: "algo-service"
        - name: PYTHONPATH
          value: "/app"
        - name: WORKERS
          value: "4"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: model-cache
          mountPath: /root/.cache
        - name: logs
          mountPath: /var/log/voicehelper
        - name: temp
          mountPath: /tmp
        resources:
          requests:
            memory: "4Gi"
            cpu: "1000m"
          limits:
            memory: "16Gi"
            cpu: "8000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 60
      volumes:
      - name: model-cache
        persistentVolumeClaim:
          claimName: model-cache-pvc
      - name: logs
        emptyDir: {}
      - name: temp
        emptyDir:
          sizeLimit: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: algo-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: algo-service
    app.kubernetes.io/component: algorithm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: algo-service
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
# 前端服务
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/component: web
    app.kubernetes.io/version: "2.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
        app.kubernetes.io/component: web
        app.kubernetes.io/version: "2.0"
    spec:
      serviceAccountName: voicehelper-sa
      containers:
      - name: frontend
        image: voicehelper/frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: NEXT_PUBLIC_API_URL
          value: "http://gateway-service:8080"
        - name: NEXT_PUBLIC_WS_URL
          value: "ws://gateway-service:8080/ws"
        - name: NEXT_PUBLIC_VOICE_URL
          value: "http://voice-service:8001"
        - name: PORT
          value: "3000"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/component: web
spec:
  selector:
    app.kubernetes.io/name: frontend
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  type: ClusterIP

---
# 语音服务
apiVersion: apps/v1
kind: Deployment
metadata:
  name: voice-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: voice-service
    app.kubernetes.io/component: voice
    app.kubernetes.io/version: "2.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: voice-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: voice-service
        app.kubernetes.io/component: voice
        app.kubernetes.io/version: "2.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: voicehelper-sa
      containers:
      - name: voice-service
        image: voicehelper/voice-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
          name: http
          protocol: TCP
        - containerPort: 8002
          name: websocket
          protocol: TCP
        envFrom:
        - configMapRef:
            name: voicehelper-config
        - secretRef:
            name: voicehelper-secrets
        env:
        - name: SERVICE_NAME
          value: "voice-service"
        - name: PYTHONPATH
          value: "/app"
        volumeMounts:
        - name: audio-cache
          mountPath: /tmp/audio
        - name: logs
          mountPath: /var/log/voicehelper
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: audio-cache
        emptyDir:
          sizeLimit: 5Gi
      - name: logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: voice-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: voice-service
    app.kubernetes.io/component: voice
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8001"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: voice-service
  ports:
  - name: http
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: websocket
    port: 8002
    targetPort: 8002
    protocol: TCP
  type: ClusterIP

---
# 持久化卷声明
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-cache-pvc
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: voicehelper
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: voicehelper-storage
  resources:
    requests:
      storage: 50Gi

---
# 水平自动扩缩容 - Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gateway-hpa
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: gateway
    app.kubernetes.io/component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gateway
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# 水平自动扩缩容 - Algo Service
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: algo-service-hpa
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: algo-service
    app.kubernetes.io/component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: algo-service
  minReplicas: 1
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 10
        periodSeconds: 120

---
# Pod 中断预算 - Gateway
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gateway-pdb
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: gateway
    app.kubernetes.io/component: availability
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: gateway

---
# Pod 中断预算 - Algo Service
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: algo-service-pdb
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: algo-service
    app.kubernetes.io/component: availability
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: algo-service
