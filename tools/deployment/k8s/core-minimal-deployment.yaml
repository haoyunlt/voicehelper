# VoiceHelper 核心最小化部署配置

# 简化的API网关服务
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: api-gateway
    app.kubernetes.io/component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api-gateway
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api-gateway
        app.kubernetes.io/component: backend
    spec:
      containers:
      - name: api-gateway
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: api-gateway-config

---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: api-gateway
spec:
  selector:
    app.kubernetes.io/name: api-gateway
  ports:
  - name: http
    port: 8080
    targetPort: 80
    protocol: TCP
  type: ClusterIP

---
# API网关配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: voicehelper
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        # 健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API路由
        location /api/health {
            return 200 '{"status":"ok","service":"voicehelper-api","timestamp":"2025-09-23T19:22:00Z"}';
            add_header Content-Type application/json;
        }
        
        location /api/version {
            return 200 '{"version":"2.0.0","build":"minimal","components":["postgresql","redis","api-gateway"]}';
            add_header Content-Type application/json;
        }
        
        # 数据库状态检查
        location /api/db/status {
            return 200 '{"database":"postgresql","status":"connected","host":"postgresql-service","port":5432}';
            add_header Content-Type application/json;
        }
        
        # Redis状态检查
        location /api/cache/status {
            return 200 '{"cache":"redis","status":"connected","host":"redis-service","port":6379}';
            add_header Content-Type application/json;
        }
        
        # 默认API响应
        location /api/ {
            return 200 '{"message":"VoiceHelper API Gateway","endpoints":["/api/health","/api/version","/api/db/status","/api/cache/status"]}';
            add_header Content-Type application/json;
        }
        
        # 静态文件和前端
        location / {
            proxy_pass http://frontend-service:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

---
# 简化的前端服务
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/component: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
        app.kubernetes.io/component: web
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: frontend-config
          mountPath: /etc/nginx/conf.d
        - name: frontend-content
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: frontend-config
        configMap:
          name: frontend-config
      - name: frontend-content
        configMap:
          name: frontend-content

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: voicehelper
  labels:
    app.kubernetes.io/name: frontend
spec:
  selector:
    app.kubernetes.io/name: frontend
  ports:
  - name: http
    port: 3000
    targetPort: 80
    protocol: TCP
  type: ClusterIP

---
# 前端配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: voicehelper
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /health {
            access_log off;
            return 200 "frontend healthy\n";
            add_header Content-Type text/plain;
        }
    }

---
# 前端内容
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  namespace: voicehelper
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>VoiceHelper - 核心版</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: white;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
            }
            h1 {
                text-align: center;
                margin-bottom: 30px;
                font-size: 2.5em;
            }
            .status-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 30px 0;
            }
            .status-card {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                text-align: center;
            }
            .status-indicator {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                display: inline-block;
                margin-right: 10px;
            }
            .status-ok { background-color: #4CAF50; }
            .status-error { background-color: #f44336; }
            .api-section {
                margin-top: 30px;
                background: rgba(255, 255, 255, 0.1);
                padding: 20px;
                border-radius: 10px;
            }
            .api-endpoint {
                background: rgba(0, 0, 0, 0.2);
                padding: 10px;
                margin: 10px 0;
                border-radius: 5px;
                font-family: 'Courier New', monospace;
            }
            button {
                background: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                margin: 5px;
            }
            button:hover {
                background: #45a049;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🎤 VoiceHelper 核心版</h1>
            <p style="text-align: center; font-size: 1.2em;">
                基于Kubernetes的轻量级语音助手系统
            </p>
            
            <div class="status-grid">
                <div class="status-card">
                    <h3>🗄️ 数据库</h3>
                    <div id="db-status">
                        <span class="status-indicator status-ok"></span>
                        PostgreSQL 运行中
                    </div>
                </div>
                <div class="status-card">
                    <h3>⚡ 缓存</h3>
                    <div id="cache-status">
                        <span class="status-indicator status-ok"></span>
                        Redis 运行中
                    </div>
                </div>
                <div class="status-card">
                    <h3>🌐 API网关</h3>
                    <div id="api-status">
                        <span class="status-indicator status-ok"></span>
                        网关服务正常
                    </div>
                </div>
                <div class="status-card">
                    <h3>🎨 前端</h3>
                    <div id="frontend-status">
                        <span class="status-indicator status-ok"></span>
                        界面服务正常
                    </div>
                </div>
            </div>
            
            <div class="api-section">
                <h3>📡 API 端点测试</h3>
                <div class="api-endpoint">
                    GET /api/health
                    <button onclick="testAPI('/api/health')">测试</button>
                </div>
                <div class="api-endpoint">
                    GET /api/version
                    <button onclick="testAPI('/api/version')">测试</button>
                </div>
                <div class="api-endpoint">
                    GET /api/db/status
                    <button onclick="testAPI('/api/db/status')">测试</button>
                </div>
                <div class="api-endpoint">
                    GET /api/cache/status
                    <button onclick="testAPI('/api/cache/status')">测试</button>
                </div>
                <div id="api-result" style="margin-top: 20px; padding: 15px; background: rgba(0,0,0,0.3); border-radius: 5px; display: none;">
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 30px; opacity: 0.8;">
                <p>🚀 部署状态: 核心服务已就绪</p>
                <p>📅 部署时间: <span id="deploy-time"></span></p>
                <p>🔧 版本: v2.0.0-minimal</p>
            </div>
        </div>
        
        <script>
            // 设置部署时间
            document.getElementById('deploy-time').textContent = new Date().toLocaleString('zh-CN');
            
            // API测试函数
            async function testAPI(endpoint) {
                const resultDiv = document.getElementById('api-result');
                resultDiv.style.display = 'block';
                resultDiv.innerHTML = '🔄 正在测试 ' + endpoint + '...';
                
                try {
                    const response = await fetch(endpoint);
                    const data = await response.text();
                    
                    let formattedData;
                    try {
                        formattedData = JSON.stringify(JSON.parse(data), null, 2);
                    } catch {
                        formattedData = data;
                    }
                    
                    resultDiv.innerHTML = `
                        <strong>✅ ${endpoint} 响应:</strong><br>
                        <pre style="margin-top: 10px; white-space: pre-wrap;">${formattedData}</pre>
                    `;
                } catch (error) {
                    resultDiv.innerHTML = `
                        <strong>❌ ${endpoint} 错误:</strong><br>
                        <pre style="margin-top: 10px; color: #ff6b6b;">${error.message}</pre>
                    `;
                }
            }
            
            // 定期检查服务状态
            setInterval(async () => {
                try {
                    const response = await fetch('/api/health');
                    if (response.ok) {
                        document.getElementById('api-status').innerHTML = 
                            '<span class="status-indicator status-ok"></span>网关服务正常';
                    }
                } catch {
                    document.getElementById('api-status').innerHTML = 
                        '<span class="status-indicator status-error"></span>网关服务异常';
                }
            }, 30000);
        </script>
    </body>
    </html>

---
# 简化的Ingress配置
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: voicehelper-core-ingress
  namespace: voicehelper
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: voicehelper.local
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 8080
