# VoiceHelper Helm Chart 默认配置

# 全局配置
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# 镜像配置
image:
  registry: docker.io
  repository: voicehelper
  tag: "1.0.0"
  pullPolicy: IfNotPresent

# 服务配置
services:
  gateway:
    enabled: true
    image:
      repository: voicehelper/gateway
      tag: "1.0.0"
    replicaCount: 3
    port: 8080
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "1000m"
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    
  algo:
    enabled: true
    image:
      repository: voicehelper/algo
      tag: "1.0.0"
    replicaCount: 2
    port: 8000
    resources:
      requests:
        memory: "2Gi"
        cpu: "1000m"
      limits:
        memory: "8Gi"
        cpu: "4000m"
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      targetCPUUtilizationPercentage: 75
      targetMemoryUtilizationPercentage: 85
    
  voice:
    enabled: true
    image:
      repository: voicehelper/voice
      tag: "1.0.0"
    replicaCount: 2
    port: 8001
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "2000m"
    
  frontend:
    enabled: true
    image:
      repository: voicehelper/frontend
      tag: "1.0.0"
    replicaCount: 2
    port: 3000
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# 配置管理
config:
  # 环境配置
  environment: production
  logLevel: info
  
  # SSE配置
  sse:
    maxStreams: 1000
    eventQueueSize: 100
    keepAliveInterval: 30
    streamTimeout: 10
  
  # WebSocket配置
  websocket:
    maxConnections: 1000
    sendQueueSize: 100
    heartbeatInterval: 30
    heartbeatTimeout: 60
    throttleLimit: 50
  
  # 算法服务配置
  algo:
    workers: 4
    modelPath: "/app/models"
    faissIndexPath: "/app/data/faiss"

# 密钥配置（生产环境需要覆盖）
secrets:
  jwtSecret: "your-jwt-secret-key"
  openaiApiKey: "sk-proj-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  arkApiKey: "ark-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# 数据库配置
postgresql:
  enabled: true
  auth:
    postgresPassword: "voicehelper123"
    username: "voicehelper"
    password: "voicehelper123"
    database: "voicehelper"
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "2Gi"
        cpu: "1000m"

# Redis配置
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis123"
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: "256Mi"
        cpu: "100m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# 持久化存储
persistence:
  faissData:
    enabled: true
    size: 10Gi
    storageClass: "shared-storage"
    accessMode: ReadWriteMany

# Ingress配置
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
  hosts:
    - host: voicehelper.ai
      paths:
        - path: /
          pathType: Prefix
          service: frontend
    - host: api.voicehelper.ai
      paths:
        - path: /
          pathType: Prefix
          service: gateway
  tls:
    - secretName: voicehelper-tls
      hosts:
        - voicehelper.ai
        - api.voicehelper.ai

# 监控配置
monitoring:
  enabled: true
  prometheus:
    enabled: true
    scrapeInterval: 30s
  grafana:
    enabled: true
    adminPassword: "admin123"

# 服务网格配置
serviceMesh:
  istio:
    enabled: false
  linkerd:
    enabled: false

# 安全配置
security:
  podSecurityPolicy:
    enabled: false
  networkPolicy:
    enabled: true
  rbac:
    create: true

# 节点选择器
nodeSelector: {}

# 容忍度
tolerations: []

# 亲和性
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - voicehelper
        topologyKey: kubernetes.io/hostname
