# VoiceHelper 优化版 Makefile
# 功能: 一键开发环境 + 测试 + 部署 + 监控

.PHONY: help dev test build deploy clean monitoring lint security docs

# 默认目标
.DEFAULT_GOAL := help

# 环境变量
ENV ?= development
COMPOSE_FILE ?= docker-compose.optimized.yml
COMPOSE_PROJECT_NAME ?= voicehelper

# 颜色定义
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

# 帮助信息
help: ## 显示帮助信息
	@echo "$(CYAN)VoiceHelper 开发工具$(RESET)"
	@echo ""
	@echo "$(YELLOW)可用命令:$(RESET)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)环境变量:$(RESET)"
	@echo "  ENV=$(ENV) (development/staging/production)"
	@echo "  COMPOSE_FILE=$(COMPOSE_FILE)"
	@echo ""

# 开发环境
dev: ## 启动开发环境
	@echo "$(BLUE)启动开发环境...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) up -d postgres redis minio
	@echo "$(GREEN)等待数据库启动...$(RESET)"
	@sleep 10
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) up -d backend algo
	@echo "$(GREEN)等待后端服务启动...$(RESET)"
	@sleep 15
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) up -d frontend
	@echo "$(GREEN)开发环境启动完成!$(RESET)"
	@echo "$(CYAN)访问地址:$(RESET)"
	@echo "  前端: http://localhost:3000"
	@echo "  后端: http://localhost:8080"
	@echo "  算法: http://localhost:8082"

dev-logs: ## 查看开发环境日志
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) logs -f

dev-stop: ## 停止开发环境
	@echo "$(YELLOW)停止开发环境...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) down
	@echo "$(GREEN)开发环境已停止$(RESET)"

dev-restart: dev-stop dev ## 重启开发环境

# 测试
test: ## 运行所有测试
	@echo "$(BLUE)运行所有测试...$(RESET)"
	@$(MAKE) test-backend
	@$(MAKE) test-frontend
	@$(MAKE) test-algo
	@$(MAKE) test-e2e
	@echo "$(GREEN)所有测试完成!$(RESET)"

test-backend: ## 运行后端测试
	@echo "$(BLUE)运行后端测试...$(RESET)"
	@cd backend && go test -v -race -coverprofile=coverage.out ./...
	@cd backend && go tool cover -html=coverage.out -o coverage.html
	@echo "$(GREEN)后端测试完成$(RESET)"

test-frontend: ## 运行前端测试
	@echo "$(BLUE)运行前端测试...$(RESET)"
	@cd frontend && npm test -- --coverage --watchAll=false
	@echo "$(GREEN)前端测试完成$(RESET)"

test-algo: ## 运行算法测试
	@echo "$(BLUE)运行算法测试...$(RESET)"
	@cd algo && python -m pytest --cov=. --cov-report=html --cov-report=term-missing
	@echo "$(GREEN)算法测试完成$(RESET)"

test-e2e: ## 运行E2E测试
	@echo "$(BLUE)运行E2E测试...$(RESET)"
	@cd frontend && npx playwright test
	@echo "$(GREEN)E2E测试完成$(RESET)"

test-load: ## 运行负载测试
	@echo "$(BLUE)运行负载测试...$(RESET)"
	@k6 run tests/performance/voice_load_test.js
	@echo "$(GREEN)负载测试完成$(RESET)"

# 构建
build: ## 构建所有服务
	@echo "$(BLUE)构建所有服务...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) build --parallel
	@echo "$(GREEN)构建完成!$(RESET)"

build-backend: ## 构建后端服务
	@echo "$(BLUE)构建后端服务...$(RESET)"
	@cd backend && docker build -t voicehelper/backend:latest .
	@echo "$(GREEN)后端构建完成$(RESET)"

build-frontend: ## 构建前端服务
	@echo "$(BLUE)构建前端服务...$(RESET)"
	@cd frontend && docker build -t voicehelper/frontend:latest .
	@echo "$(GREEN)前端构建完成$(RESET)"

build-algo: ## 构建算法服务
	@echo "$(BLUE)构建算法服务...$(RESET)"
	@cd algo && docker build -t voicehelper/algo:latest .
	@echo "$(GREEN)算法构建完成$(RESET)"

# 部署
deploy: ## 部署到指定环境
	@echo "$(BLUE)部署到 $(ENV) 环境...$(RESET)"
	@if [ "$(ENV)" = "production" ]; then \
		$(MAKE) deploy-production; \
	elif [ "$(ENV)" = "staging" ]; then \
		$(MAKE) deploy-staging; \
	else \
		$(MAKE) dev; \
	fi

deploy-production: ## 部署到生产环境
	@echo "$(RED)部署到生产环境...$(RESET)"
	@echo "$(YELLOW)警告: 这将部署到生产环境!$(RESET)"
	@read -p "确认继续? [y/N] " confirm && [ "$$confirm" = "y" ]
	@docker-compose -f $(COMPOSE_FILE) -f docker-compose.production.yml up -d
	@echo "$(GREEN)生产环境部署完成$(RESET)"

deploy-staging: ## 部署到预发环境
	@echo "$(BLUE)部署到预发环境...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) -f docker-compose.staging.yml up -d
	@echo "$(GREEN)预发环境部署完成$(RESET)"

# 监控
monitoring: ## 启动监控服务
	@echo "$(BLUE)启动监控服务...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) up -d prometheus grafana jaeger
	@echo "$(GREEN)监控服务启动完成!$(RESET)"
	@echo "$(CYAN)访问地址:$(RESET)"
	@echo "  Prometheus: http://localhost:9090"
	@echo "  Grafana: http://localhost:3001 (admin/admin123)"
	@echo "  Jaeger: http://localhost:16686"

monitoring-stop: ## 停止监控服务
	@echo "$(YELLOW)停止监控服务...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) stop prometheus grafana jaeger
	@echo "$(GREEN)监控服务已停止$(RESET)"

# 代码质量
lint: ## 运行代码检查
	@echo "$(BLUE)运行代码检查...$(RESET)"
	@$(MAKE) lint-backend
	@$(MAKE) lint-frontend
	@$(MAKE) lint-algo
	@echo "$(GREEN)代码检查完成!$(RESET)"

lint-backend: ## 检查后端代码
	@echo "$(BLUE)检查后端代码...$(RESET)"
	@cd backend && golangci-lint run ./...
	@cd backend && go fmt ./...
	@cd backend && go vet ./...

lint-frontend: ## 检查前端代码
	@echo "$(BLUE)检查前端代码...$(RESET)"
	@cd frontend && npm run lint
	@cd frontend && npm run type-check

lint-algo: ## 检查算法代码
	@echo "$(BLUE)检查算法代码...$(RESET)"
	@cd algo && black --check .
	@cd algo && isort --check-only .
	@cd algo && flake8 .
	@cd algo && mypy .

format: ## 格式化代码
	@echo "$(BLUE)格式化代码...$(RESET)"
	@cd backend && go fmt ./...
	@cd frontend && npm run format
	@cd algo && black .
	@cd algo && isort .
	@echo "$(GREEN)代码格式化完成$(RESET)"

# 安全检查
security: ## 运行安全检查
	@echo "$(BLUE)运行安全检查...$(RESET)"
	@$(MAKE) security-backend
	@$(MAKE) security-frontend
	@$(MAKE) security-algo
	@$(MAKE) security-docker
	@echo "$(GREEN)安全检查完成!$(RESET)"

security-backend: ## 后端安全检查
	@echo "$(BLUE)后端安全检查...$(RESET)"
	@cd backend && gosec ./...

security-frontend: ## 前端安全检查
	@echo "$(BLUE)前端安全检查...$(RESET)"
	@cd frontend && npm audit --audit-level=moderate

security-algo: ## 算法安全检查
	@echo "$(BLUE)算法安全检查...$(RESET)"
	@cd algo && bandit -r . -f json -o bandit-report.json

security-docker: ## Docker安全检查
	@echo "$(BLUE)Docker安全检查...$(RESET)"
	@docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		-v $(PWD):/app aquasec/trivy fs --security-checks vuln /app

# 文档
docs: ## 生成文档
	@echo "$(BLUE)生成文档...$(RESET)"
	@$(MAKE) docs-api
	@$(MAKE) docs-code
	@echo "$(GREEN)文档生成完成!$(RESET)"

docs-api: ## 生成API文档
	@echo "$(BLUE)生成API文档...$(RESET)"
	@cd backend && swag init -g cmd/server/main.go -o docs/swagger
	@cd frontend && npm run build-docs

docs-code: ## 生成代码文档
	@echo "$(BLUE)生成代码文档...$(RESET)"
	@cd backend && godoc -http=:6060 &
	@cd algo && pdoc --html --output-dir docs .

docs-serve: ## 启动文档服务
	@echo "$(BLUE)启动文档服务...$(RESET)"
	@cd docs && python -m http.server 8000
	@echo "$(CYAN)文档地址: http://localhost:8000$(RESET)"

# 数据库
db-migrate: ## 运行数据库迁移
	@echo "$(BLUE)运行数据库迁移...$(RESET)"
	@cd backend && go run cmd/migrate/main.go up
	@echo "$(GREEN)数据库迁移完成$(RESET)"

db-rollback: ## 回滚数据库迁移
	@echo "$(YELLOW)回滚数据库迁移...$(RESET)"
	@cd backend && go run cmd/migrate/main.go down 1
	@echo "$(GREEN)数据库回滚完成$(RESET)"

db-seed: ## 填充测试数据
	@echo "$(BLUE)填充测试数据...$(RESET)"
	@cd backend && go run cmd/seed/main.go
	@echo "$(GREEN)测试数据填充完成$(RESET)"

db-backup: ## 备份数据库
	@echo "$(BLUE)备份数据库...$(RESET)"
	@docker exec voicehelper-postgres pg_dump -U voicehelper voicehelper > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)数据库备份完成$(RESET)"

# 清理
clean: ## 清理环境
	@echo "$(YELLOW)清理环境...$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) down -v --remove-orphans
	@docker system prune -f
	@echo "$(GREEN)环境清理完成$(RESET)"

clean-images: ## 清理镜像
	@echo "$(YELLOW)清理镜像...$(RESET)"
	@docker rmi $(shell docker images -q voicehelper/*) 2>/dev/null || true
	@docker image prune -f
	@echo "$(GREEN)镜像清理完成$(RESET)"

clean-volumes: ## 清理数据卷
	@echo "$(RED)警告: 这将删除所有数据!$(RESET)"
	@read -p "确认继续? [y/N] " confirm && [ "$$confirm" = "y" ]
	@docker volume prune -f
	@echo "$(GREEN)数据卷清理完成$(RESET)"

# 工具
tools: ## 安装开发工具
	@echo "$(BLUE)安装开发工具...$(RESET)"
	@$(MAKE) tools-go
	@$(MAKE) tools-node
	@$(MAKE) tools-python
	@echo "$(GREEN)开发工具安装完成!$(RESET)"

tools-go: ## 安装Go工具
	@echo "$(BLUE)安装Go工具...$(RESET)"
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@go install github.com/swaggo/swag/cmd/swag@latest
	@go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

tools-node: ## 安装Node.js工具
	@echo "$(BLUE)安装Node.js工具...$(RESET)"
	@npm install -g @playwright/test
	@npm install -g eslint prettier

tools-python: ## 安装Python工具
	@echo "$(BLUE)安装Python工具...$(RESET)"
	@pip install pre-commit black isort flake8 mypy bandit pytest pytest-cov

# 健康检查
health: ## 检查服务健康状态
	@echo "$(BLUE)检查服务健康状态...$(RESET)"
	@echo "$(CYAN)后端服务:$(RESET)"
	@curl -f http://localhost:8080/health 2>/dev/null && echo "$(GREEN)✓ 健康$(RESET)" || echo "$(RED)✗ 异常$(RESET)"
	@echo "$(CYAN)算法服务:$(RESET)"
	@curl -f http://localhost:8082/health 2>/dev/null && echo "$(GREEN)✓ 健康$(RESET)" || echo "$(RED)✗ 异常$(RESET)"
	@echo "$(CYAN)前端服务:$(RESET)"
	@curl -f http://localhost:3000/api/health 2>/dev/null && echo "$(GREEN)✓ 健康$(RESET)" || echo "$(RED)✗ 异常$(RESET)"

status: ## 显示服务状态
	@echo "$(BLUE)服务状态:$(RESET)"
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) ps

logs: ## 查看服务日志
	@docker-compose -f $(COMPOSE_FILE) -p $(COMPOSE_PROJECT_NAME) logs -f --tail=100

# 性能分析
profile: ## 性能分析
	@echo "$(BLUE)启动性能分析...$(RESET)"
	@echo "$(CYAN)后端性能分析: http://localhost:8080/debug/pprof/$(RESET)"
	@echo "$(CYAN)算法性能分析: http://localhost:8082/debug/pprof/$(RESET)"

benchmark: ## 运行基准测试
	@echo "$(BLUE)运行基准测试...$(RESET)"
	@cd backend && go test -bench=. -benchmem ./...
	@cd algo && python -m pytest --benchmark-only

# 版本管理
version: ## 显示版本信息
	@echo "$(CYAN)VoiceHelper 版本信息:$(RESET)"
	@echo "Git Commit: $(shell git rev-parse --short HEAD)"
	@echo "Git Branch: $(shell git rev-parse --abbrev-ref HEAD)"
	@echo "Build Time: $(shell date)"
	@echo "Go Version: $(shell go version)"
	@echo "Node Version: $(shell node --version)"
	@echo "Python Version: $(shell python --version)"

release: ## 创建发布版本
	@echo "$(BLUE)创建发布版本...$(RESET)"
	@read -p "输入版本号 (例: v1.0.0): " version; \
	git tag -a $$version -m "Release $$version"; \
	git push origin $$version
	@echo "$(GREEN)发布版本创建完成$(RESET)"

# 快速命令别名
up: dev ## 启动开发环境 (别名)
down: dev-stop ## 停止开发环境 (别名)
restart: dev-restart ## 重启开发环境 (别名)
ps: status ## 显示服务状态 (别名)
