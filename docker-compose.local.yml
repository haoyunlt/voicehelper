# VoiceHelper AI - 本地开发环境 Docker Compose 配置
# 使用方法: docker-compose -f docker-compose.local.yml up -d

version: '3.8'

services:
  # ===========================================
  # 数据存储服务
  # ===========================================
  
  # PostgreSQL 主数据库
  postgres:
    image: postgres:15-alpine
    container_name: voicehelper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: voicehelper
      POSTGRES_USER: voicehelper
      POSTGRES_PASSWORD: voicehelper123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/database/init:/docker-entrypoint-initdb.d
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voicehelper -d voicehelper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存和会话存储
  redis:
    image: redis:7-alpine
    container_name: voicehelper-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deploy/config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Milvus 向量数据库
  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: voicehelper-milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - voicehelper-network

  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: voicehelper-milvus-minio
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    image: milvusdb/milvus:v2.3.4
    container_name: voicehelper-milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
      - ./deploy/config/milvus.yaml:/milvus/configs/milvus.yaml
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3

  # Neo4j 图数据库
  neo4j:
    image: neo4j:5.15-community
    container_name: voicehelper-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/neo4j123
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4j123", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  # ===========================================
  # 应用服务
  # ===========================================

  # Go API 网关
  gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: voicehelper-gateway
    restart: unless-stopped
    environment:
      - ENV=development
      - PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=voicehelper
      - POSTGRES_USER=voicehelper
      - POSTGRES_PASSWORD=voicehelper123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - JWT_SECRET=your-jwt-secret-key-change-in-production
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3002
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python 算法服务
  algo-service:
    build:
      context: ./algo
      dockerfile: Dockerfile.dev
    container_name: voicehelper-algo
    restart: unless-stopped
    environment:
      - ENV=development
      - PORT=8000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=voicehelper
      - POSTGRES_USER=voicehelper
      - POSTGRES_PASSWORD=voicehelper123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neo4j123
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ARK_API_KEY=${ARK_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      - ./algo:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus-standalone:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python 语音服务
  voice-service:
    build:
      context: ./algo
      dockerfile: Dockerfile.voice.dev
    container_name: voicehelper-voice
    restart: unless-stopped
    environment:
      - ENV=development
      - PORT=8001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
    ports:
      - "8001:8001"
    volumes:
      - ./algo:/app
      - /app/__pycache__
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: voicehelper-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3000
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080
      - NEXT_PUBLIC_VOICE_WS_URL=ws://localhost:8001
    ports:
      - "3000:3000"
      - "3001:3001"  # HMR端口
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - gateway
      - algo-service
    networks:
      - voicehelper-network

  # 开发者门户
  developer-portal:
    build:
      context: ./developer-portal
      dockerfile: Dockerfile.dev
    container_name: voicehelper-portal
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=3002
      - NEXT_PUBLIC_API_URL=http://localhost:8080
    ports:
      - "3002:3002"
    volumes:
      - ./developer-portal:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - gateway
    networks:
      - voicehelper-network

  # 管理后台
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile.dev
    container_name: voicehelper-admin
    restart: unless-stopped
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - PORT=5001
      - DATABASE_URL=postgresql://voicehelper:voicehelper123@postgres:5432/voicehelper
      - REDIS_URL=redis://:redis123@redis:6379/0
    ports:
      - "5001:5001"
    volumes:
      - ./admin:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voicehelper-network

  # ===========================================
  # 开发工具和管理界面
  # ===========================================

  # pgAdmin - PostgreSQL 管理界面
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: voicehelper-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@voicehelper.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./deploy/config/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - voicehelper-network

  # Redis Commander - Redis 管理界面
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: voicehelper-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - voicehelper-network

  # Milvus Attu - Milvus 管理界面
  attu:
    image: zilliz/attu:v2.3.4
    container_name: voicehelper-attu
    restart: unless-stopped
    environment:
      MILVUS_URL: milvus-standalone:19530
    ports:
      - "3003:3000"
    depends_on:
      - milvus-standalone
    networks:
      - voicehelper-network

  # ===========================================
  # 监控服务 (可选)
  # ===========================================

  # Prometheus - 指标收集
  prometheus:
    image: prom/prometheus:latest
    container_name: voicehelper-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - voicehelper-network

  # Grafana - 数据可视化
  grafana:
    image: grafana/grafana:latest
    container_name: voicehelper-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3004:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/config/grafana/provisioning:/etc/grafana/provisioning
      - ./deploy/config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - voicehelper-network

  # ===========================================
  # 开发辅助服务
  # ===========================================

  # Mailhog - 邮件测试服务
  mailhog:
    image: mailhog/mailhog:latest
    container_name: voicehelper-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - voicehelper-network

  # Nginx - 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: voicehelper-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/config/nginx/conf.d:/etc/nginx/conf.d
      - ./deploy/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - gateway
      - developer-portal
      - admin
    networks:
      - voicehelper-network

# ===========================================
# 网络配置
# ===========================================
networks:
  voicehelper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# 数据卷配置
# ===========================================
volumes:
  # 数据库数据卷
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  
  # Milvus 相关数据卷
  milvus_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  
  # 管理工具数据卷
  pgadmin_data:
    driver: local
  
  # 监控数据卷
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
