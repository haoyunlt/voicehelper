# VoiceHelper AI - 本地开发环境 Docker Compose 配置
# 使用方法: docker-compose -f docker-compose.local.yml up -d

version: '3.8'

services:
  # ===========================================
  # 数据存储服务
  # ===========================================
  
  # PostgreSQL 主数据库
  postgres:
    image: postgres:15-alpine
    container_name: voicehelper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: voicehelper
      POSTGRES_USER: voicehelper
      POSTGRES_PASSWORD: voicehelper123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/deployment/database:/docker-entrypoint-initdb.d
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voicehelper -d voicehelper"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存和会话存储
  redis:
    image: redis:7-alpine
    container_name: voicehelper-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./tools/deployment/config/redis-optimized.conf:/usr/local/etc/redis/redis.conf
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5


  # Neo4j 图数据库
  neo4j:
    image: neo4j:5.15-community
    container_name: voicehelper-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/neo4j123
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "neo4j123", "RETURN 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  # ===========================================
  # 应用服务
  # ===========================================

  # Go API 网关
  gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: voicehelper-gateway
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # 容器内部服务发现配置 (覆盖 .env 中的 localhost 配置)
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - PORT=${GATEWAY_PORT:-8080}
      - SERVICE_NAME=${GATEWAY_SERVICE_NAME:-voicehelper-gateway}
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python 算法服务
  algo-service:
    build:
      context: ./algo
      dockerfile: Dockerfile
    container_name: voicehelper-algo
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # 容器内部服务发现配置 (覆盖 .env 中的 localhost 配置)
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - NEO4J_URI=bolt://neo4j:7687
      - PORT=${ALGO_PORT:-8000}
      - SERVICE_NAME=${ALGO_SERVICE_NAME:-voicehelper-algo}
    ports:
      - "8000:8000"
    volumes:
      - ./algo:/app
      - /app/__pycache__
      - algo_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python 语音服务
  voice-service:
    build:
      context: ./algo
      dockerfile: Dockerfile.voice.dev
    container_name: voicehelper-voice
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # 容器内部服务发现配置 (覆盖 .env 中的 localhost 配置)
      - REDIS_HOST=redis
      - PORT=${VOICE_PORT:-8001}
      - SERVICE_NAME=${VOICE_SERVICE_NAME:-voicehelper-voice}
    ports:
      - "8001:8001"
    volumes:
      - ./algo:/app
      - /app/__pycache__
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js 前端服务
  frontend:
    build:
      context: ./platforms/web
      dockerfile: Dockerfile.simple
    container_name: voicehelper-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PORT=${FRONTEND_PORT:-3000}
      - SERVICE_NAME=${FRONTEND_SERVICE_NAME:-voicehelper-frontend}
    ports:
      - "3000:3000"
    volumes:
      - ./platforms/web:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    depends_on:
      - gateway
      - algo-service
    networks:
      - voicehelper-network

  # 开发者门户
  developer-portal:
    build:
      context: ./platforms/web/developer-portal
      dockerfile: Dockerfile
    container_name: voicehelper-portal
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PORT=${PORTAL_PORT:-3002}
      - SERVICE_NAME=voicehelper-portal
    ports:
      - "3002:3002"
    volumes:
      - ./platforms/web/developer-portal:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - gateway
    networks:
      - voicehelper-network

  # 管理后台
  admin:
    build:
      context: ./platforms/admin
      dockerfile: Dockerfile
    container_name: voicehelper-admin
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # 容器内部服务发现配置 (覆盖 .env 中的 localhost 配置)
      - DATABASE_URL=postgresql://voicehelper:voicehelper123@postgres:5432/voicehelper
      - REDIS_URL=redis://:redis123@redis:6379/0
      - PORT=${ADMIN_PORT:-5001}
      - SERVICE_NAME=${ADMIN_SERVICE_NAME:-voicehelper-admin}
    ports:
      - "5001:5001"
    volumes:
      - ./platforms/admin:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voicehelper-network

  # ===========================================
  # 开发工具和管理界面
  # ===========================================

  # pgAdmin - PostgreSQL 管理界面
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: voicehelper-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@voicehelper.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./tools/deployment/config/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - voicehelper-network

  # Redis Commander - Redis 管理界面
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: voicehelper-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - voicehelper-network


  # ===========================================
  # 监控服务 (可选)
  # ===========================================

  # Prometheus - 指标收集
  prometheus:
    image: prom/prometheus:latest
    container_name: voicehelper-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./tools/deployment/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - voicehelper-network

  # Grafana - 数据可视化
  grafana:
    image: grafana/grafana:latest
    container_name: voicehelper-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3004:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/deployment/config/grafana/provisioning:/etc/grafana/provisioning
      - ./tools/deployment/config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - voicehelper-network

  # ===========================================
  # 开发辅助服务
  # ===========================================

  # Mailhog - 邮件测试服务
  mailhog:
    image: mailhog/mailhog:latest
    container_name: voicehelper-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - voicehelper-network

  # Nginx - 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: voicehelper-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./tools/deployment/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./tools/deployment/config/nginx/conf.d:/etc/nginx/conf.d
      - ./tools/deployment/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - gateway
      - developer-portal
      - admin
    networks:
      - voicehelper-network

# ===========================================
# 网络配置
# ===========================================
networks:
  voicehelper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# 数据卷配置
# ===========================================
volumes:
  # 数据库数据卷
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  
  
  # 管理工具数据卷
  pgadmin_data:
    driver: local
  
  # 监控数据卷
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # 前端开发数据卷
  frontend_node_modules:
    driver: local
  frontend_next:
    driver: local
  
  # 算法服务数据卷
  algo_data:
    driver: local
