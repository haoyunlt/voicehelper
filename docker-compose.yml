# VoiceHelper AI - ÂÆåÊï¥Áîü‰∫ßÁ∫ß Docker Compose ÈÖçÁΩÆ
# ÁâàÊú¨: 2.0.0
# ‰ΩøÁî®ÊñπÊ≥ï: docker-compose up -d

version: '3.8'

services:
  # ===========================================
  # üóÑÔ∏è Êï∞ÊçÆÂ≠òÂÇ®ÊúçÂä°
  # ===========================================
  
  # PostgreSQL ‰∏ªÊï∞ÊçÆÂ∫ì
  postgres:
    image: postgres:15-alpine
    container_name: voicehelper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-voicehelper}
      POSTGRES_USER: ${POSTGRES_USER:-voicehelper}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-voicehelper123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./tools/deployment/database:/docker-entrypoint-initdb.d
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-voicehelper} -d ${POSTGRES_DB:-voicehelper}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis ÁºìÂ≠òÂíå‰ºöËØùÂ≠òÂÇ®
  redis:
    image: redis:7-alpine
    container_name: voicehelper-redis
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./tools/deployment/config/redis-optimized.conf:/usr/local/etc/redis/redis.conf
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # BGE ÂêëÈáèÂåñÊúçÂä°
  bge-service:
    build:
      context: ./algo
      dockerfile: Dockerfile.bge
    container_name: voicehelper-bge
    restart: unless-stopped
    environment:
      - MODEL_NAME=BAAI/bge-large-zh-v1.5
      - MODEL_CACHE_DIR=/app/models
      - MAX_BATCH_SIZE=32
      - MAX_SEQUENCE_LENGTH=512
      - PORT=8080
    ports:
      - "8080:8080"
    volumes:
      - bge_models:/app/models
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # FAISS ÂêëÈáèÊêúÁ¥¢ÊúçÂä°
  faiss-service:
    build:
      context: ./algo
      dockerfile: Dockerfile.faiss
    container_name: voicehelper-faiss
    restart: unless-stopped
    environment:
      - FAISS_INDEX_TYPE=IVF
      - FAISS_NLIST=100
      - FAISS_NPROBE=10
      - VECTOR_DIMENSION=1024
      - INDEX_SAVE_INTERVAL=300
      - PORT=8081
    ports:
      - "8081:8081"
    volumes:
      - faiss_data:/app/data
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Neo4j ÂõæÊï∞ÊçÆÂ∫ì
  neo4j:
    image: neo4j:5.15-community
    container_name: voicehelper-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4j123}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD:-neo4j123}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # NATS Ê∂àÊÅØÈòüÂàó
  nats:
    image: nats:2.10-alpine
    container_name: voicehelper-nats
    restart: unless-stopped
    command: [
      "--cluster_name", "voicehelper",
      "--port", "4222",
      "--http_port", "8222",
      "--jetstream",
      "--store_dir", "/data"
    ]
    ports:
      - "4222:4222"
      - "8222:8222"
    volumes:
      - nats_data:/data
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # ü§ñ Ê†∏ÂøÉÂ∫îÁî®ÊúçÂä°
  # ===========================================

  # Go API ÁΩëÂÖ≥
  gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: voicehelper-gateway
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # ÊúçÂä°ÂèëÁé∞ÈÖçÁΩÆ
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - NEO4J_URI=bolt://neo4j:7687
      - NATS_URL=nats://nats:4222
      - BGE_SERVICE_URL=http://bge-service:8080
      - FAISS_SERVICE_URL=http://faiss-service:8081
      - PORT=${GATEWAY_PORT:-8080}
      - SERVICE_NAME=voicehelper-gateway
      - GIN_MODE=release
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    volumes:
      - gateway_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Python ÁÆóÊ≥ïÊúçÂä°
  algo-service:
    build:
      context: ./algo
      dockerfile: Dockerfile
      target: production
    container_name: voicehelper-algo
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # ÊúçÂä°ÂèëÁé∞ÈÖçÁΩÆ
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - NEO4J_URI=bolt://neo4j:7687
      - NATS_URL=nats://nats:4222
      - BGE_SERVICE_URL=http://bge-service:8080
      - FAISS_SERVICE_URL=http://faiss-service:8081
      - PORT=${ALGO_PORT:-8000}
      - SERVICE_NAME=voicehelper-algo
      - PYTHONPATH=/app
    ports:
      - "${ALGO_PORT:-8000}:8000"
    volumes:
      - algo_data:/app/data
      - algo_logs:/app/logs
      - algo_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      bge-service:
        condition: service_healthy
      faiss-service:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - voicehelper-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # ËØ≠Èü≥Â§ÑÁêÜÊúçÂä°
  voice-service:
    build:
      context: ./algo
      dockerfile: Dockerfile
      target: production
    container_name: voicehelper-voice
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
      - PORT=${VOICE_PORT:-8001}
      - SERVICE_NAME=voicehelper-voice
      - PYTHONPATH=/app
    ports:
      - "${VOICE_PORT:-8001}:8001"
    volumes:
      - voice_data:/app/data
      - voice_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - voicehelper-network
    command: ["python", "-m", "services.voice_service"]

  # Next.js ÂâçÁ´ØÊúçÂä°
  frontend:
    build:
      context: ./platforms/web
      dockerfile: Dockerfile
      target: runner
    container_name: voicehelper-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=${FRONTEND_PORT:-3000}
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_API_URL=http://gateway:8080
      - NEXT_PUBLIC_WS_URL=ws://gateway:8080
      - NEXT_PUBLIC_VOICE_WS_URL=ws://voice-service:8001
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - gateway
      - algo-service
    networks:
      - voicehelper-network

  # ÂºÄÂèëËÄÖÈó®Êà∑
  developer-portal:
    build:
      context: ./developer-portal
      dockerfile: Dockerfile
    container_name: voicehelper-portal
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=${PORTAL_PORT:-3002}
      - NEXT_PUBLIC_API_URL=http://gateway:8080
    ports:
      - "${PORTAL_PORT:-3002}:3002"
    depends_on:
      - gateway
    networks:
      - voicehelper-network

  # ÁÆ°ÁêÜÂêéÂè∞
  admin:
    build:
      context: ./platforms/admin
      dockerfile: Dockerfile
    container_name: voicehelper-admin
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - FLASK_ENV=production
      - PORT=${ADMIN_PORT:-5001}
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-voicehelper}:${POSTGRES_PASSWORD:-voicehelper123}@postgres:5432/${POSTGRES_DB:-voicehelper}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    ports:
      - "${ADMIN_PORT:-5001}:5001"
    volumes:
      - admin_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voicehelper-network

  # ===========================================
  # üîß ÁÆ°ÁêÜÂ∑•ÂÖ∑ÂíåÁïåÈù¢
  # ===========================================

  # pgAdmin - PostgreSQL ÁÆ°ÁêÜÁïåÈù¢
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: voicehelper-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@voicehelper.ai
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./tools/deployment/config/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - voicehelper-network

  # Redis Commander - Redis ÁÆ°ÁêÜÁïåÈù¢
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: voicehelper-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-redis123}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - voicehelper-network

  # BGE+FAISS ÁÆ°ÁêÜÁïåÈù¢
  vector-admin:
    build:
      context: ./tools/vector-admin
      dockerfile: Dockerfile
    container_name: voicehelper-vector-admin
    restart: unless-stopped
    environment:
      - BGE_SERVICE_URL=http://bge-service:8080
      - FAISS_SERVICE_URL=http://faiss-service:8081
    ports:
      - "3001:3000"
    depends_on:
      - bge-service
      - faiss-service
    networks:
      - voicehelper-network

  # ===========================================
  # üìä ÁõëÊéßÂíåÂèØËßÇÊµãÊÄß
  # ===========================================

  # Prometheus - ÊåáÊ†áÊî∂ÈõÜ
  prometheus:
    image: prom/prometheus:latest
    container_name: voicehelper-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./tools/deployment/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./tools/deployment/config/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Êï∞ÊçÆÂèØËßÜÂåñ
  grafana:
    image: grafana/grafana:latest
    container_name: voicehelper-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3004:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./tools/deployment/config/grafana/provisioning:/etc/grafana/provisioning
      - ./tools/deployment/config/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - voicehelper-network

  # Jaeger - ÂàÜÂ∏ÉÂºèÈìæË∑ØËøΩË∏™
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: voicehelper-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    volumes:
      - jaeger_data:/tmp
    networks:
      - voicehelper-network

  # ===========================================
  # üåê Ë¥üËΩΩÂùáË°°ÂíåÂèçÂêë‰ª£ÁêÜ
  # ===========================================

  # Nginx - ÂèçÂêë‰ª£ÁêÜÂíåË¥üËΩΩÂùáË°°
  nginx:
    image: nginx:alpine
    container_name: voicehelper-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./tools/deployment/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./tools/deployment/config/nginx/conf.d:/etc/nginx/conf.d
      - ./tools/deployment/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - gateway
      - developer-portal
      - admin
    networks:
      - voicehelper-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # üß™ ÂºÄÂèëÂíåÊµãËØïÂ∑•ÂÖ∑
  # ===========================================

  # Mailhog - ÈÇÆ‰ª∂ÊµãËØïÊúçÂä°
  mailhog:
    image: mailhog/mailhog:latest
    container_name: voicehelper-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - voicehelper-network

  # Swagger UI - API ÊñáÊ°£
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: voicehelper-swagger
    restart: unless-stopped
    environment:
      SWAGGER_JSON: /app/openapi.yaml
    ports:
      - "8082:8080"
    volumes:
      - ./docs/api/openapi.yaml:/app/openapi.yaml
    networks:
      - voicehelper-network

  # ===========================================
  # ü§ñ Dify AI Âπ≥Âè∞ (ÂèØÈÄâ)
  # ===========================================
  # Ê≥®ÊÑè: DifyÊúçÂä°Âú®ÂçïÁã¨ÁöÑcomposeÊñá‰ª∂‰∏≠ÂÆö‰πâ
  # ‰ΩøÁî®: docker-compose -f docker-compose.yml -f docker-compose.dify.yml up -d

# ===========================================
# üåê ÁΩëÁªúÈÖçÁΩÆ
# ===========================================
networks:
  voicehelper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ===========================================
# üíæ Êï∞ÊçÆÂç∑ÈÖçÁΩÆ
# ===========================================
volumes:
  # Êï∞ÊçÆÂ∫ìÊï∞ÊçÆÂç∑
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  
  # ÂêëÈáèÊúçÂä°Êï∞ÊçÆÂç∑
  bge_models:
    driver: local
  faiss_data:
    driver: local
  
  # Ê∂àÊÅØÈòüÂàóÊï∞ÊçÆÂç∑
  nats_data:
    driver: local
  
  # Â∫îÁî®Êï∞ÊçÆÂç∑
  algo_data:
    driver: local
  algo_logs:
    driver: local
  algo_models:
    driver: local
  voice_data:
    driver: local
  voice_logs:
    driver: local
  gateway_logs:
    driver: local
  admin_data:
    driver: local
  
  # ÁÆ°ÁêÜÂ∑•ÂÖ∑Êï∞ÊçÆÂç∑
  pgadmin_data:
    driver: local
  
  # ÁõëÊéßÊï∞ÊçÆÂç∑
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  
  # Êó•ÂøóÊï∞ÊçÆÂç∑
  nginx_logs:
    driver: local
