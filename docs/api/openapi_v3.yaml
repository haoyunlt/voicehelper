openapi: 3.0.3
info:
  title: 智能聊天机器人系统 API
  description: |
    v1.9.0 开发者平台API - 支持多模态交互、语音处理、图像理解等功能
    
    ## 核心特性
    - 🎯 **多模态交互**: 支持文本、语音、图像、视频、结构化数据
    - 🚀 **超低延迟**: 语音处理150ms内响应
    - 🧠 **智能理解**: 95%图像识别准确率，92%多模态融合准确率
    - 🔧 **500+服务集成**: 办公套件、开发工具、社交平台等
    - 🛡️ **企业级安全**: 零信任架构，端到端加密
    
    ## 认证方式
    支持多种认证方式：
    - API Key认证 (推荐)
    - OAuth 2.0
    - JWT Token
    
  version: 1.9.0
  contact:
    name: API Support
    email: api-support@voicehelper.com
    url: https://docs.voicehelper.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.voicehelper.com/v1
    description: 生产环境
  - url: https://api-staging.voicehelper.com/v1
    description: 测试环境
  - url: http://localhost:8080/v1
    description: 本地开发环境

security:
  - ApiKeyAuth: []
  - OAuth2: [read, write]
  - BearerAuth: []

paths:
  # ==================== 聊天对话 API ====================
  /chat/completions:
    post:
      tags:
        - Chat
      summary: 创建聊天完成
      description: |
        发送消息并获取AI回复，支持多模态输入和流式响应
        
        ### 支持的模态
        - 文本消息
        - 图像分析
        - 语音输入
        - 文件上传
        
      operationId: createChatCompletion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            examples:
              text_only:
                summary: 纯文本对话
                value:
                  messages:
                    - role: user
                      content: "你好，请介绍一下你的功能"
                  model: "gpt-4-turbo"
                  stream: false
              multimodal:
                summary: 多模态输入
                value:
                  messages:
                    - role: user
                      content: "分析这张图片"
                      attachments:
                        - type: image
                          url: "https://example.com/image.jpg"
                  model: "gpt-4-vision"
                  multimodal_config:
                    enable_vision: true
                    enable_emotion_detection: true
      responses:
        '200':
          description: 成功响应
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ChatCompletionStreamResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /chat/conversations:
    get:
      tags:
        - Chat
      summary: 获取对话列表
      description: 获取用户的对话历史列表
      operationId: getConversations
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: filter
          in: query
          schema:
            type: string
            enum: [all, active, archived]
            default: all
      responses:
        '200':
          description: 对话列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationList'

  /chat/conversations/{conversationId}:
    get:
      tags:
        - Chat
      summary: 获取对话详情
      operationId: getConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 对话详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '404':
          $ref: '#/components/responses/NotFound'

  # ==================== 语音处理 API ====================
  /voice/synthesize:
    post:
      tags:
        - Voice
      summary: 语音合成
      description: |
        将文本转换为语音，支持情感化TTS和多种语音风格
        
        ### v1.8.0 增强功能
        - 150ms超低延迟
        - 6种情感表达
        - 多语言支持
        - 流式合成
        
      operationId: synthesizeVoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoiceSynthesisRequest'
      responses:
        '200':
          description: 合成成功
          content:
            audio/wav:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceSynthesisResponse'

  /voice/recognize:
    post:
      tags:
        - Voice
      summary: 语音识别
      description: |
        将语音转换为文本，支持实时流式识别
        
        ### 特性
        - 多语言识别
        - 噪声抑制
        - 说话人分离
        - 情感检测
        
      operationId: recognizeVoice
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                  description: 音频文件
                config:
                  $ref: '#/components/schemas/VoiceRecognitionConfig'
      responses:
        '200':
          description: 识别结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceRecognitionResponse'

  # ==================== 图像理解 API ====================
  /vision/analyze:
    post:
      tags:
        - Vision
      summary: 图像分析
      description: |
        v1.8.0 增强图像理解 - 支持12种图像类型，95%准确率
        
        ### 支持的分析类型
        - 物体检测
        - 文字提取 (OCR)
        - 场景分析
        - 情感检测
        - 品牌识别
        - 质量评估
        
      operationId: analyzeImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: 图像文件
                tasks:
                  type: array
                  items:
                    type: string
                    enum: [description, object_detection, text_extraction, scene_analysis, emotion_detection, brand_recognition]
                query:
                  type: string
                  description: 用户查询
      responses:
        '200':
          description: 分析结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisionAnalysisResponse'

  # ==================== 多模态融合 API ====================
  /multimodal/fuse:
    post:
      tags:
        - Multimodal
      summary: 多模态融合
      description: |
        v1.8.0 增强多模态融合 - 92%融合准确率，支持5种模态
        
        ### 融合策略
        - 层次化融合
        - 跨模态注意力
        - 自适应权重
        - 动态调整
        
      operationId: fuseModalities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultimodalFusionRequest'
      responses:
        '200':
          description: 融合结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultimodalFusionResponse'

  # ==================== MCP服务集成 API ====================
  /mcp/services:
    get:
      tags:
        - MCP
      summary: 获取可用服务列表
      description: |
        v1.9.0 MCP生态系统 - 500+服务集成
        
        ### 服务分类
        - 办公套件 (Google Workspace, Office 365)
        - 开发工具 (GitHub, GitLab, Jira)
        - 社交平台 (钉钉, 企业微信, Slack)
        - 电商平台 (淘宝, 京东)
        - 云服务等
        
      operationId: getServices
      parameters:
        - name: category
          in: query
          schema:
            type: string
            enum: [office_suite, development, social_platform, ecommerce, cloud_service, database, monitoring, security, ai_ml]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, beta, maintenance]
            default: active
      responses:
        '200':
          description: 服务列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'

  /mcp/services/{serviceName}/call:
    post:
      tags:
        - MCP
      summary: 调用MCP服务
      description: 调用指定的MCP服务执行操作
      operationId: callMCPService
      parameters:
        - name: serviceName
          in: path
          required: true
          schema:
            type: string
          example: github
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPServiceCallRequest'
      responses:
        '200':
          description: 服务调用结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPServiceCallResponse'

  # ==================== 数据集管理 API ====================
  /datasets:
    get:
      tags:
        - Datasets
      summary: 获取数据集列表
      operationId: getDatasets
      responses:
        '200':
          description: 数据集列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetList'
    post:
      tags:
        - Datasets
      summary: 创建数据集
      operationId: createDataset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetRequest'
      responses:
        '201':
          description: 数据集创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'

  /datasets/{datasetId}/ingest:
    post:
      tags:
        - Datasets
      summary: 数据摄取
      description: 向数据集中添加文档或数据
      operationId: ingestData
      parameters:
        - name: datasetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                metadata:
                  type: object
      responses:
        '200':
          description: 摄取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestResponse'

  # ==================== 系统监控 API ====================
  /system/health:
    get:
      tags:
        - System
      summary: 系统健康检查
      description: 获取系统各组件的健康状态
      operationId: getSystemHealth
      responses:
        '200':
          description: 系统健康状态
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealth'

  /system/metrics:
    get:
      tags:
        - System
      summary: 系统指标
      description: 获取系统性能指标和统计信息
      operationId: getSystemMetrics
      responses:
        '200':
          description: 系统指标
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMetrics'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.voicehelper.com/oauth/authorize
          tokenUrl: https://auth.voicehelper.com/oauth/token
          scopes:
            read: 读取权限
            write: 写入权限
            admin: 管理员权限
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ==================== 聊天相关 ====================
    ChatCompletionRequest:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        model:
          type: string
          enum: [gpt-4-turbo, gpt-4-vision, claude-3-opus, doubao-pro]
          default: gpt-4-turbo
        stream:
          type: boolean
          default: false
        max_tokens:
          type: integer
          minimum: 1
          maximum: 4096
          default: 1000
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 0.7
        multimodal_config:
          $ref: '#/components/schemas/MultimodalConfig'

    Message:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant]
        content:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'

    Attachment:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [image, audio, video, file]
        url:
          type: string
          format: uri
        data:
          type: string
          format: base64
        metadata:
          type: object

    MultimodalConfig:
      type: object
      properties:
        enable_vision:
          type: boolean
          default: true
        enable_audio:
          type: boolean
          default: true
        enable_emotion_detection:
          type: boolean
          default: false
        fusion_strategy:
          type: string
          enum: [hierarchical, adaptive_attention, cross_transformer]
          default: hierarchical

    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [chat.completion]
        created:
          type: integer
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
        usage:
          $ref: '#/components/schemas/Usage'
        processing_metrics:
          $ref: '#/components/schemas/ProcessingMetrics'

    Choice:
      type: object
      properties:
        index:
          type: integer
        message:
          $ref: '#/components/schemas/Message'
        finish_reason:
          type: string
          enum: [stop, length, content_filter]

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
        completion_tokens:
          type: integer
        total_tokens:
          type: integer

    ProcessingMetrics:
      type: object
      properties:
        total_time_ms:
          type: number
        voice_processing_time_ms:
          type: number
        vision_processing_time_ms:
          type: number
        fusion_time_ms:
          type: number
        model_inference_time_ms:
          type: number

    # ==================== 语音相关 ====================
    VoiceSynthesisRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          maxLength: 5000
        voice:
          type: string
          enum: [alloy, echo, fable, onyx, nova, shimmer]
          default: alloy
        emotion:
          type: string
          enum: [neutral, happy, sad, angry, excited, calm]
          default: neutral
        speed:
          type: number
          minimum: 0.25
          maximum: 4.0
          default: 1.0
        language:
          type: string
          enum: [zh-CN, en-US, ja-JP, ko-KR]
          default: zh-CN
        streaming:
          type: boolean
          default: false

    VoiceSynthesisResponse:
      type: object
      properties:
        audio_url:
          type: string
          format: uri
        duration_ms:
          type: integer
        synthesis_time_ms:
          type: number
        quality_score:
          type: number
          minimum: 0
          maximum: 1
        emotion_applied:
          type: string

    VoiceRecognitionConfig:
      type: object
      properties:
        language:
          type: string
          default: zh-CN
        enable_emotion_detection:
          type: boolean
          default: false
        enable_speaker_separation:
          type: boolean
          default: false
        noise_reduction:
          type: boolean
          default: true

    VoiceRecognitionResponse:
      type: object
      properties:
        text:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1
        language_detected:
          type: string
        processing_time_ms:
          type: number
        emotions:
          type: array
          items:
            $ref: '#/components/schemas/EmotionScore'
        speakers:
          type: array
          items:
            $ref: '#/components/schemas/SpeakerSegment'

    # ==================== 视觉相关 ====================
    VisionAnalysisResponse:
      type: object
      properties:
        image_type:
          type: string
        description:
          type: string
        objects:
          type: array
          items:
            $ref: '#/components/schemas/DetectedObject'
        texts:
          type: array
          items:
            $ref: '#/components/schemas/ExtractedText'
        emotions:
          type: array
          items:
            $ref: '#/components/schemas/EmotionScore'
        brands:
          type: array
          items:
            $ref: '#/components/schemas/DetectedBrand'
        quality_metrics:
          $ref: '#/components/schemas/ImageQualityMetrics'
        processing_time_ms:
          type: number
        accuracy_estimate:
          type: number

    DetectedObject:
      type: object
      properties:
        label:
          type: string
        confidence:
          type: number
        bbox:
          type: array
          items:
            type: number
          minItems: 4
          maxItems: 4
        attributes:
          type: object

    ExtractedText:
      type: object
      properties:
        text:
          type: string
        confidence:
          type: number
        bbox:
          type: array
          items:
            type: number
        language:
          type: string

    DetectedBrand:
      type: object
      properties:
        brand:
          type: string
        confidence:
          type: number
        bbox:
          type: array
          items:
            type: number
        category:
          type: string

    ImageQualityMetrics:
      type: object
      properties:
        sharpness:
          type: number
        brightness:
          type: number
        contrast:
          type: number
        noise_level:
          type: number
        overall_quality:
          type: number

    # ==================== 多模态融合 ====================
    MultimodalFusionRequest:
      type: object
      required:
        - modality_inputs
      properties:
        modality_inputs:
          type: array
          items:
            $ref: '#/components/schemas/ModalityInput'
        fusion_strategy:
          type: string
          enum: [hierarchical, adaptive_attention, cross_transformer, dynamic_weighting]
          default: hierarchical
        context:
          type: object

    ModalityInput:
      type: object
      required:
        - modality
        - data
      properties:
        modality:
          type: string
          enum: [text, image, audio, video, structured]
        data:
          oneOf:
            - type: string
            - type: object
        confidence:
          type: number
          default: 1.0
        quality_score:
          type: number
          default: 1.0
        metadata:
          type: object

    MultimodalFusionResponse:
      type: object
      properties:
        fused_representation:
          type: array
          items:
            type: number
        confidence:
          type: number
        modality_contributions:
          type: object
        fusion_strategy_used:
          type: string
        processing_time_ms:
          type: number
        quality_metrics:
          type: object
        uncertainty_estimate:
          type: number

    # ==================== MCP服务 ====================
    ServiceList:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceInfo'
        total_count:
          type: integer
        categories:
          type: object

    ServiceInfo:
      type: object
      properties:
        name:
          type: string
        category:
          type: string
        version:
          type: string
        description:
          type: string
        provider:
          type: string
        status:
          type: string
        supported_operations:
          type: array
          items:
            type: string
        reliability_score:
          type: number
        response_time_ms:
          type: integer

    MCPServiceCallRequest:
      type: object
      required:
        - operation
        - params
      properties:
        operation:
          type: string
        params:
          type: object

    MCPServiceCallResponse:
      type: object
      properties:
        success:
          type: boolean
        result:
          type: object
        service:
          type: string
        operation:
          type: string
        response_time_ms:
          type: number
        error:
          type: string

    # ==================== 通用组件 ====================
    EmotionScore:
      type: object
      properties:
        emotion:
          type: string
        confidence:
          type: number
        intensity:
          type: number
        modality:
          type: string

    SpeakerSegment:
      type: object
      properties:
        speaker_id:
          type: string
        start_time:
          type: number
        end_time:
          type: number
        text:
          type: string
        confidence:
          type: number

    # ==================== 数据集相关 ====================
    DatasetList:
      type: object
      properties:
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
        total_count:
          type: integer

    Dataset:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        document_count:
          type: integer
        size_bytes:
          type: integer
        status:
          type: string
          enum: [active, processing, error]

    CreateDatasetRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        config:
          type: object

    IngestResponse:
      type: object
      properties:
        ingested_documents:
          type: integer
        failed_documents:
          type: integer
        processing_time_ms:
          type: number
        errors:
          type: array
          items:
            type: string

    # ==================== 系统监控 ====================
    SystemHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        components:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentHealth'
        timestamp:
          type: string
          format: date-time

    ComponentHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        response_time_ms:
          type: number
        error_rate:
          type: number
        last_check:
          type: string
          format: date-time

    SystemMetrics:
      type: object
      properties:
        version:
          type: string
        uptime_seconds:
          type: integer
        requests_per_minute:
          type: number
        average_response_time_ms:
          type: number
        error_rate:
          type: number
        active_connections:
          type: integer
        memory_usage_mb:
          type: number
        cpu_usage_percent:
          type: number
        performance_metrics:
          $ref: '#/components/schemas/PerformanceMetrics'

    PerformanceMetrics:
      type: object
      properties:
        voice_processing:
          $ref: '#/components/schemas/VoiceMetrics'
        vision_processing:
          $ref: '#/components/schemas/VisionMetrics'
        multimodal_fusion:
          $ref: '#/components/schemas/FusionMetrics'
        mcp_services:
          $ref: '#/components/schemas/MCPMetrics'

    VoiceMetrics:
      type: object
      properties:
        average_synthesis_time_ms:
          type: number
        average_recognition_time_ms:
          type: number
        success_rate:
          type: number
        target_achievement_rate:
          type: number

    VisionMetrics:
      type: object
      properties:
        average_processing_time_ms:
          type: number
        average_accuracy:
          type: number
        supported_image_types:
          type: integer
        success_rate:
          type: number

    FusionMetrics:
      type: object
      properties:
        average_fusion_time_ms:
          type: number
        average_accuracy:
          type: number
        supported_modalities:
          type: integer
        success_rate:
          type: number

    MCPMetrics:
      type: object
      properties:
        total_services:
          type: integer
        active_services:
          type: integer
        average_response_time_ms:
          type: number
        success_rate:
          type: number

    # ==================== 对话相关 ====================
    ConversationList:
      type: object
      properties:
        conversations:
          type: array
          items:
            $ref: '#/components/schemas/ConversationSummary'
        total_count:
          type: integer
        has_more:
          type: boolean

    ConversationSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        message_count:
          type: integer
        status:
          type: string
          enum: [active, archived]

    Conversation:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        metadata:
          type: object

    # ==================== 流式响应 ====================
    ChatCompletionStreamResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
          enum: [chat.completion.chunk]
        created:
          type: integer
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/StreamChoice'

    StreamChoice:
      type: object
      properties:
        index:
          type: integer
        delta:
          $ref: '#/components/schemas/MessageDelta'
        finish_reason:
          type: string
          enum: [stop, length, content_filter]

    MessageDelta:
      type: object
      properties:
        role:
          type: string
        content:
          type: string

    # ==================== 错误响应 ====================
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            type:
              type: string
            details:
              type: object

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: invalid_request
              message: 请求参数不正确
              type: invalid_request_error

    Unauthorized:
      description: 未授权访问
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: unauthorized
              message: API密钥无效或已过期
              type: authentication_error

    NotFound:
      description: 资源未找到
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: not_found
              message: 请求的资源不存在
              type: not_found_error

    RateLimitExceeded:
      description: 请求频率超限
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: rate_limit_exceeded
              message: 请求频率超过限制，请稍后重试
              type: rate_limit_error
      headers:
        Retry-After:
          schema:
            type: integer
          description: 建议重试的秒数

tags:
  - name: Chat
    description: 聊天对话相关API
  - name: Voice
    description: 语音处理相关API
  - name: Vision
    description: 图像理解相关API
  - name: Multimodal
    description: 多模态融合相关API
  - name: MCP
    description: MCP服务集成相关API
  - name: Datasets
    description: 数据集管理相关API
  - name: System
    description: 系统监控相关API
